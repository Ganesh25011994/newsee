import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:go_router/go_router.dart';
import 'package:newsee/AppSamples/ReactiveForms/config/appconfig.dart';
import 'package:newsee/Model/login_request.dart';
import 'package:newsee/blocs/login/login_bloc.dart';
import 'package:reactive_forms/reactive_forms.dart';

class LoginpageView extends StatelessWidget {
  const LoginpageView({super.key});

  @override
  Widget build(BuildContext context) {
    final loginFormgroup = AppConfig().loginFormgroup;

    return BlocListener<LoginBloc, LoginState>(
      listener: (context, state) {
        switch (state.loginStatus) {
          case LoginStatus.success:
            print('LoginStatus.success...');
            context.goNamed('home');
            break;
          case LoginStatus.fetch:
          case LoginStatus.init:
            print('LoginStatus.init...');
            break;
          case LoginStatus.error:
            print('LoginStatus.error...');
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(content: Text('Login failed: Invalid credentials')),
            );
            break;
        }
      },
      child: BlocBuilder<LoginBloc, LoginState>(
        builder: (context, state) {
          final isLoading = state.loginStatus == LoginStatus.fetch;

          return Scaffold(
            resizeToAvoidBottomInset: true, 
            body: SingleChildScrollView( 
              child: Container(
                padding: const EdgeInsets.only(top: 20),
               
                // width: double.infinity,
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    colors: [
                      const Color.fromARGB(235, 2, 34, 66),
                      Color.fromARGB(211, 36, 12, 171),
                    ],
                  ),
                  
                  // image: DecorationImage(image: 
                  // AssetImage('images/log.png'),
                  // fit: BoxFit.cover,
                  
                  // alignment: Alignment.topCenter,
                  
                  
                  // )
                ),

              
                child: ReactiveForm(
                  formGroup: loginFormgroup,
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.center,
                    children: [
                      
                      const Padding(
                        padding: EdgeInsets.only(left: 15),
                      ),
                      SizedBox(height: 120), 
                      Container(
                        padding: const EdgeInsets.only(
                          top: 50,
                          left: 20,
                          right: 20,
                        ),
                        width: MediaQuery.of(context).size.width,
                        decoration: BoxDecoration(
                          color: Colors.white,
                          borderRadius: BorderRadius.only(
                            topLeft: Radius.circular(35),
                          ),
                        ),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.center,
                          children: <Widget>[
                              Align(
                              alignment: Alignment.topLeft,
                            child: Padding(
                              padding: const EdgeInsets.only(bottom: 60),
                              child: Text('Login Account',
                              // textAlign: TextAlign.start,
                              style: TextStyle(
                                fontSize: 30
                                
                              ),
                              
                              ),
                            )
                
                
                            ),
                            ReactiveTextField(
                              formControlName: 'username',
                              autofocus: true,
                              decoration: InputDecoration(
                                labelText: 'Username',
                                suffixIcon: Icon(Icons.person),
                                border: OutlineInputBorder(
                                  borderRadius: BorderRadius.circular(10),
                                ),
                              ),
                              validationMessages: {
                                ValidationMessage.required:
                                    (error) => 'UserName is Required',
                                ValidationMessage.contains:
                                    (error) => error as String,
                              },
                            ),
                            SizedBox(height: 40.0),
                            ReactiveTextField(
                              formControlName: 'password',
                              decoration: InputDecoration(
                                labelText: 'Password',
                                suffixIcon: Icon(Icons.lock),
                                border: OutlineInputBorder(
                                  borderRadius: BorderRadius.circular(10),
                                ),
                              ),
                              obscureText: true,
                              validationMessages: {
                                ValidationMessage.required:
                                    (error) => 'Password is Required',
                                ValidationMessage.contains:
                                    (error) => error as String,
                              },
                            ),
                              Row(
                              mainAxisAlignment:MainAxisAlignment.spaceBetween,
                              children: [
                               Align(
                    alignment: Alignment.centerRight,
                    child: TextButton(
                      onPressed: () {},
                      child: Text('Forgot Password?'),
                    ),
                  ),
                  Align(
                    alignment: Alignment.bottomRight,
                    child: TextButton(
                      onPressed: () {},
                      child: Text('Verification Code'),
                    ),
                  ),
                                
                              ],
                            ),
                            SizedBox(height: 30),
                            Align(
                              alignment: Alignment.center,
                            child:TextButton(onPressed: (){}, 
                            
                            child: Text('Register Account'))
                
                
                            ),
                           
                            SizedBox(height: 20),
                            Container(
                              width: double.infinity,
                              child: ElevatedButton(
                                style: const ButtonStyle(
                                  backgroundColor: MaterialStatePropertyAll<Color>(
                                    Color.fromARGB(255, 16, 9, 123),
                                  ),
                                  foregroundColor: MaterialStatePropertyAll(
                                    Colors.white,
                                  ),
                                ),
                                onPressed:
                                    isLoading
                                        ? null
                                        : () {
                                            if (loginFormgroup.valid) {
                                              context.read<LoginBloc>().add(
                                                LoginFetch(
                                                  loginRequest: LoginRequest(
                                                    username:
                                                        loginFormgroup
                                                            .value['username']
                                                        as String,
                                                    password:
                                                        loginFormgroup
                                                            .value['password']
                                                        as String,
                                                  ),
                                                ),
                                              );
                                              print(state.toString());
                
                                              context.goNamed('home');
                                            } else {
                                              ScaffoldMessenger.of(
                                                context,
                                              ).showSnackBar(
                                                const SnackBar(
                                                  content: Text(
                                                    'Please fill in all required fields',
                                                  ),
                                                ),
                                              );
                                            }
                                          },
                                child: isLoading
                                    ? const SizedBox(
                                        width: 24,
                                        height: 24,
                                        child: CircularProgressIndicator(
                                          color: Colors.white,
                                          strokeWidth: 2.0,
                                        ),
                                      )
                                    : const Text("Login"),
                              ),
                              
                            ),
                          
                            Padding(
                              padding: const EdgeInsets.only(top: 20),
                              child: Center(
                                child: Text(
                                  'Powered by LENDperfect',
                                  style: TextStyle(
                                    fontWeight: FontWeight.bold,
                                    color: Colors.black,
                                    fontSize: 15,
                                  ),
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ),
          );
        },
      ),
    );
  }
}

